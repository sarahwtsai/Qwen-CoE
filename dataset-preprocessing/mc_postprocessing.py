# Parse MC questions generated by generate_qa_dataset.py and save as HuggingFace dataset

import jsonlines
from datasets import load_dataset

jsonl_file = "../datasets/ComSciQA_Llama70B.jsonl"
output_file = "../datasets/processed_ComSciQA_Llama70B.jsonl"
output_file_hf = "../datasets/ComSciQA_Llama70B.hf"

with jsonlines.open(jsonl_file,"r") as f:
    data = [obj for obj in f]

def validate_schema(data):
    # Define the expected schema
    expected_schema = {
        "question": str,
        "choices": {
            "label": list,
            "text": list
        },
        "answerKey": str,
    }

    # Check if the top-level keys are present and no extra keys
    if data.keys() != expected_schema.keys():
        return False
    
    # Check the types of the top-level keys
    if not isinstance(data["question"], str):
        return False
    if not isinstance(data["choices"], dict):
        return False
    if not isinstance(data["answerKey"], str):
        return False
    
    # Check if the choices keys are present
    choices = data["choices"]
    if not all(key in choices for key in ["label", "text"]):
        return False
    
    # Check the types of the choices keys
    if not isinstance(choices["label"], list):
        return False
    if not isinstance(choices["text"], list):
        return False
    
    # Check if the elements in the label and text lists are strings
    if not all(isinstance(item, str) for item in choices["label"]):
        return False
    if not all(isinstance(item, str) for item in choices["text"]):
        return False
    
    return True


for i, line in enumerate(data):
    all_questions = line['all_questions']
    source = line['source']
    
    # Successful extraction if all_questions is a list
    if isinstance(all_questions, list):
        for mc in all_questions:
            if validate_schema(mc):
                mc['source'] = source
                with jsonlines.open(output_file, 'a') as writer:
                    writer.write(mc) 

# Check how many questions were generated at the end
with jsonlines.open(output_file,"r") as f:
    all_q = [obj for obj in f]
print('Total Number of Questions Generated:', len(all_q))

# Convert JSONL file into HF dataset
dataset = load_dataset("json", data_files=output_file)

# Display dataset structure
print(dataset)

# Save as HF dataset
dataset.save_to_disk(output_file_hf)


